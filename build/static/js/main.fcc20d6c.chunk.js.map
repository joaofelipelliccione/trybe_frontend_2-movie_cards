{"version":3,"sources":["components/Header.jsx","components/Rating.jsx","components/MovieCard.jsx","components/MovieList.jsx","data.js","components/Footer.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","className","React","Component","Rating","rating","this","props","defaultProps","MovieCard","movie","title","subtitle","storyline","imagePath","src","alt","MovieList","movies","map","mvObj","key","Footer","href","rel","target","App","moviesData","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gQAYeA,E,4JATb,WACE,OACE,4BAAQC,UAAU,qBAChB,wBAAIA,UAAU,cAAd,4B,GAJaC,IAAMC,WCCrBC,E,4JACJ,WACE,IAAQC,EAAWC,KAAKC,MAAhBF,OAER,OACE,0BAAMJ,UAAU,UACZI,O,GANWH,IAAMC,WAiB3BC,EAAOI,aAAe,CACpBH,OAAQ,GAGKD,QCSAK,E,4JA5Bb,WACE,MAAqEH,KAAKC,MAAlEG,MAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,SAAUC,EAAlC,EAAkCA,UAAWC,EAA7C,EAA6CA,UAAWT,EAAxD,EAAwDA,OAExD,OACE,yBAAKJ,UAAU,cACb,yBAAKc,IAAMD,EAAYE,IAAML,EAAQV,UAAU,qBAC/C,yBAAKA,UAAU,mBACb,wBAAIA,UAAU,oBAAqBU,GACnC,wBAAKV,UAAU,uBAAwBW,GACvC,uBAAGX,UAAU,wBAAyBY,IAExC,kBAAC,EAAD,CAAQR,OAAM,uBAASA,U,GAZPH,IAAMC,WCmBfc,E,4JAlBb,WACE,IAAQC,EAAWZ,KAAKC,MAAhBW,OAER,OACE,0BAAMjB,UAAU,cACZiB,EAAOC,KAAI,SAACC,GAAD,OAAW,kBAAC,EAAD,CAAWV,MAAQU,EAAQC,IAAMD,EAAMT,gB,GAN/CT,IAAMC,WCkCfe,EAtCA,CACb,CACEP,MAAO,cACPC,SAAU,mBACVC,UAAW,iKACXR,OAAQ,IACRS,UAAW,2CAEb,CACEH,MAAO,gBACPC,SAAU,iBACVC,UAAW,4HACXR,OAAQ,IACRS,UAAW,2CAEb,CACEH,MAAO,qBACPC,SAAU,qBACVC,UAAW,qJACXR,OAAQ,EACRS,UAAW,qCAEb,CACEH,MAAO,kBACPC,SAAU,kBACVC,UAAW,2LACXR,OAAQ,IACRS,UAAW,8BAEb,CACEH,MAAO,gBACPC,SAAU,WACVC,UAAW,iKACXR,OAAQ,IACRS,UAAW,sCCpBAQ,E,4JAXb,WACE,OACE,4BAAQrB,UAAU,cAChB,8CACa,uBAAGsB,KAAK,yCAAyCC,IAAI,sBAAsBC,OAAO,UAAlF,oC,GALAvB,IAAMC,WCeZuB,MAVf,WACE,OACE,yBAAKzB,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAWiB,OAASS,IACpB,kBAAC,EAAD,QCAcC,QACW,cAA7BC,OAAOC,SAASC,UAEkB,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAC1B,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAACC,GAClCA,EAAaC,iB","file":"static/js/main.fcc20d6c.chunk.js","sourcesContent":["import React from 'react';\n\nclass Header extends React.Component { // Componente respons√°vel pelo cabe√ßalho da p√°gina. Ser√° chamado dentro do Componente React de classe 'App'.\n  render() {\n    return (\n      <header className='movie-card-header'>\n        <h1 className='page-title'>Movie Cards Library</h1>\n      </header>\n    );\n  }\n}\n\nexport default Header;\n","import React from 'react';\nimport propTypes from 'prop-types';\n\nclass Rating extends React.Component { // Componente React que representa o elemento que acumula a nota de cada filme. Ser√° chamado dentro do Componente React de classe 'MovieCard'.\n  render() {\n    const { rating } = this.props; // Utilizando object destructuring para captar a nota de um determinado filme.\n\n    return (\n      <span className=\"rating\">\n        { rating }\n      </span>\n    );\n  }\n}\n\n// PropTypes:\nRating.propTypes = {\n  rating: propTypes.number,\n};\n\nRating.defaultProps = { // Caso n√£o haja valor de rating, para um determinado filme, ele receber√° nota 0.\n  rating: 0,\n};\n\nexport default Rating;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport Rating from './Rating';\n\nclass MovieCard extends React.Component { // Componente React que se transformar√° em cards de filmes. Ser√° chamado dentro do Componente React de classe 'MovieList'.\n  render() {\n    const { movie: { title, subtitle, storyline, imagePath, rating } } = this.props; // Utilizando object destructuring para captar as informa√ß√µes necess√°rias para o desenvolvimento de cada card. A props 'movie', desse componente, recebe um objeto que cont√™m informa√ß√µes de um determinado filme.\n\n    return (\n      <div className='movie-card'>\n        <img src={ imagePath } alt={ title } className='movie-card-image' />\n        <div className='movie-card-body'>\n          <h4 className='movie-card-title'>{ title }</h4>\n          <h5  className='movie-card-subtitle'>{ subtitle }</h5>\n          <p className='movie-card-storyline'>{ storyline }</p>\n        </div>\n        <Rating rating={ `üåü ${rating}` } />\n      </div>\n    );\n  }\n}\n\n// PropTypes:\nMovieCard.propTypes = {\n  movie: propTypes.shape({\n    title: propTypes.string,\n    subtitle: propTypes.string,\n    storyline: propTypes.string,\n    imagePath: propTypes.string,\n    rating: propTypes.number,\n  }).isRequired,\n};\n\nexport default MovieCard;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport MovieCard from './MovieCard';\n\nclass MovieList extends React.Component { // Componente React que representa toda a √°rea com os cards dos filmes. Ser√° chamado dentro do Componente React de classe 'App'.\n  render() {\n    const { movies } = this.props; // Utilizando object destructuring para captar o array de objetos com informa√ß√µes de cada filme, que ser√° passado via props.\n\n    return (\n      <main className='movie-list'>\n        { movies.map((mvObj) => <MovieCard movie={ mvObj } key={ mvObj.title } />) }\n      </main>\n    );\n  }\n}\n\n// OBS: Uma boa forma de se renderizar algo, no React, √© a partir de um array com os elementos da p√°gina. Por esse motivo, utilizei a HOF .map() acima. Essa, ser√° respons√°vel pelo desenvolvimento de um componente React de classe MovieCard, para cada 'mvObj' presente dentro do array 'movies'.\n\n// PropTypes:\nMovieList.propTypes = {\n  movies: propTypes.arrayOf(propTypes.object).isRequired,\n};\n\nexport default MovieList;\n","const movies = [\n  {\n    title: 'Kingsglaive',\n    subtitle: 'Final Fantasy XV',\n    storyline: 'King Regis, who oversees the land of Lucis, commands his army of soldiers to protect the kingdom from the Niflheim empire\\'s plans to steal the sacred crystal.',\n    rating: 4.5,\n    imagePath: 'images/Kingsglaive_Final_Fantasy_XV.jpg',\n  },\n  {\n    title: 'Final Fantasy',\n    subtitle: 'Spirits Within',\n    storyline: 'A scientist makes a last stand on Earth with the help of a ragtag team of soldiers against an invasion of alien phantoms.',\n    rating: 4.5,\n    imagePath: 'images/Final_Fantasy_Spirits_Within.jpg',\n  },\n  {\n    title: 'Ghost In The Shell',\n    subtitle: 'Ghost In The Shell',\n    storyline: 'A hacker known as the Puppet Master is hunted by a female cyborg cop and her partner. This film is a revised version of Ghost in the Shell (1995).',\n    rating: 5,\n    imagePath: 'images/Ghost_In_The_Shell_2_0.jpg',\n  },\n  {\n    title: 'Appleseed Alpha',\n    subtitle: 'Appleseed Alpha',\n    storyline: 'A young female soldier Deunan and her cyborg partner Briareos survive through the post World War 3 apocalyptic New York in search of human\\'s future hope, the legendary city of Olympus.',\n    rating: 3.8,\n    imagePath: 'images/Appleseed_Alpha.jpg',\n  },\n  {\n    title: 'Resident Evil',\n    subtitle: 'Vendetta',\n    storyline: 'Chris Redfield enlists the help of Leon S. Kennedy and Rebecca Chambers to stop a death merchant, with a vengeance, from spreading a deadly virus in New York.',\n    rating: 4.2,\n    imagePath: 'images/Resident_Evil_Vendetta.jpg',\n  },\n];\n\nexport default movies;\n","import React from 'react';\n\nclass Footer extends React.Component { // Componente respons√°vel pelo rodap√© da p√°gina. Ser√° chamado dentro do Componente React de classe 'App'.\n  render() {\n    return (\n      <footer className='pageFooter'>\n        <span>\n        Developed by <a href=\"https://github.com/joaofelipelliccione\" rel=\"noopener noreferrer\" target=\"_blank\">Jo√£o Felipe Pelliccione</a>\n        </span>\n      </footer>\n    );\n  }\n}\n\nexport default Footer;","import React from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport MovieList from './components/MovieList';\nimport moviesData from './data';\nimport Footer from './components/Footer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <MovieList movies={ moviesData } />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}